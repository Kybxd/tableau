// Protoconf - Tableau's data interchange format
// https://tableauio.github.io/

syntax = "proto3";

package tableau;

import "google/protobuf/descriptor.proto";

option go_package = "github.com/tableauio/tableau/proto/tableaupb";

// Option field numbers must be in the range 50000-99999. This range
// is reserved for internal use within individual organizations.

extend google.protobuf.FileOptions {
  WorkbookOptions workbook = 50000;
}

extend google.protobuf.MessageOptions {
  WorksheetOptions worksheet = 50000;
}

extend google.protobuf.FieldOptions {
  FieldOptions field = 50000;
}

extend google.protobuf.EnumOptions {
  EnumOptions enum = 50000;
}

extend google.protobuf.EnumValueOptions {
  EnumValueOptions evalue = 50000;
}

message WorkbookOptions {
  string name = 1;  // Workbook name
}

message WorksheetOptions {
  // Worksheet name
  string name = 1;
  // Exact row number of column name definition at a worksheet.
  //
  // Default: 1.
  int32 namerow = 2;
  // Exact row number of column type definition at a worksheet.
  //
  // Default: 2.
  int32 typerow = 3;
  // Exact row number of column note definition at a worksheet.
  //
  // Default: 3.
  int32 noterow = 4;
  // Start row number of data at a worksheet.
  //
  // Default: 4.
  int32 datarow = 5;
  // Interchange the rows and columns of worksheet.
  bool transpose = 6;
  // Tags for usage, e.g.: "1,2" specifying loading servers. Specially,
  // "*" means all servers.
  string tags = 7;
  // The line number of column name definition in a cell. 0 means
  // the whole cell.
  //
  // Default: 0.
  int32 nameline = 8;
  // The line number of column type definition in a cell. 0 means
  // the whole cell.
  //
  // Default: 0.
  int32 typeline = 9;
  // Nested naming of the namerow.
  bool nested = 10;
  // Separator for:
  //    1. separating in-cell list elements.
  //    2. separating in-cell map items.
  //
  // Default: ",".
  string sep = 11;
  // Subseparator for separating in-cell map Key-Value pair.
  //
  // Default: ":".
  string subsep = 12;
  // Merge multiple workbook sheets (comma-separated) into this one
  // with the same structure. E.g.: Item1.xlsx,Item2.xlsx.
  repeated string merger = 13;
  // Merge adjacent rows with the same key. If the key cell is not set,
  // it will be treated the same as the nearest key above the same column.
  bool adjacent_key = 14;
  // In order to track field presence of basic types (numeric, string, bytes,
  // and enums), the generated field will be labeled "optional".
  bool field_presence = 15;
  // Indicate this XML sheet is a template or not. Template sheet structure will
  // only be parsed based on metasheet "@TABLEAU" in comments.
  bool template = 16;

  ////////// Loader related options below //////////
  // Generate OrderedMap accessers or not.
  bool ordered_map = 50;
  // Generate index accessers, and multiple index columns is comma-separated.
  // Format: <ColumnName>[@IndexName], if IndexName is not set, it will be
  // this columnâ€™s parent struct type name. E.g.: ItemID,ShopID@Shop.
  repeated string index = 51;
}

message FieldOptions {
  string name = 1;    // Scalar type's variable name or composite type's variable name (prefix).
  string note = 2;    // Field note, maybe in another language (Chinese) other than variable name (English).
  string key = 3;     // Only set when this field type is map or keyed-list.
  Layout layout = 4;  // For map/list types with cardinality. Default: LAYOUT_DEFAULT.
  Span span = 5;      // For list element or map value types. Default: SPAN_CROSS_CELL.
  string sep = 6;     // NOT USED yet. Default: ",".
  string subsep = 7;  // NOT USED yet. Default: ":".
  bool optional = 8;  // Whether the field is optional.

  FieldProp prop = 15;  // Property of field.
}

message FieldProp {
  // Usage: {range:"1,10" refer:"Item.ID"}

  // NOTE: two perspectives of the check:
  //   - Local perspective, the check only depends on configuration of itself.
  //   - Global perspective, the check depends on all configurations.

  // Local perspective: format: "1,10", "1,~", "~,10".
  //
  // Different interpretations of range:
  //   - number: value range
  //   - string: count of utf-8 code point
  string range = 1;
  // Local perspective: whether the map key's value is unique.
  bool unique = 2;
  // Global perspective: ensure this field value is in another sheet's
  // column value space (aka message's field value space).
  //
  // Format: "SheetName(SheetAlias).ColumnName"
  //
  // E.g:
  //  - "Item.ID" : sheet name is unique.
  //  - "Item(ItemConf).ID" : different workbooks have the same sheet name,
  //    but sheet alias is unique inherently.
  string refer = 3;
  // Local perspective: ensure this field's value is a sequence and begins with this value.
  // Effect: key of map or keyed list.
  optional int64 sequence = 4;
  // Local perspective: default value of scalar field if not set.
  string default = 5;
  // Local perspective: auto-detected fixed size of horizontal list/map.
  //
  // The list size is auto-detected by size of the max present list elements in namerow.
  // The map size is auto-detected by size of the max present map items in namerow.
  bool fixed = 6;
  // Local perspective: specified fixed size of horizontal list/map.
  uint32 size = 7;
}

// Layout of list and map.
enum Layout {
  // Default:
  //  - vertical for struct map
  //  - incell for scalar map
  //  - horizontal for struct list
  //  - incell for scalar list
  LAYOUT_DEFAULT = 0;
  LAYOUT_VERTICAL = 1;    // Vertical
  LAYOUT_HORIZONTAL = 2;  // Horizontal
  LAYOUT_INCELL = 3;      // Incell
}

// Field data span of scalar and struct.
enum Span {
  // Default:
  //  - inner cell for scalar type: bool, string, bytes, number, and enum.
  //  - cross cell for struct type: map-value, list-element, and struct-field.
  SPAN_DEFAULT = 0;
  SPAN_CROSS_CELL = 1;  // The field data spans cross multiple cells.
  SPAN_INNER_CELL = 2;  // The field data spans only in one cell.
}

message EnumOptions {
  string name = 1;  // alias name
}
message EnumValueOptions {
  string name = 1;  // alias name
}
